%!test
%! r1 = 15e-3;
%! omega0 = 100;
%! Phi0 = 30 * pi / 180;
%! t = linspace(0, abs(2 * pi / omega0), 100);
%! omegaP = 10;
%! Phi1 = Phi0 + omega0 * t + 0.5 * omegaP * t.^2;
%! omega1 = omega0 + omegaP * t;
%! a_rad = -r1 * omega1.^2;
%! a_tan = repmat(r1 * omegaP, 1, length(t));
%! v_tan = r1 * omega1;
%! n1 = [1; 0; 0];
%! o1 = [r1; 0; 0];
%! x1 = [r1 * cos(Phi1);
%!       r1 * sin(Phi1);
%!       zeros(1, length(t))];
%! res.t = t.';
%! res.trajectory{1} = [zeros(5, length(t));
%!                      Phi1].';
%! res.velocity{1} = [zeros(5, length(t));
%!                    omega1].';
%! res.acceleration{1} = [zeros(5, length(t));
%!                        repmat(omegaP, 1, length(t))].';
%! res.node_id = 1234;
%! response(1).node_label = res.node_id;
%! response(1).offset = o1;
%! response(1).direction = n1;
%! response(2).node_label = res.node_id;
%! response(2).offset = o1;
%! response(2).direction = [0; 1; 0];
%! response(3).node_label = res.node_id;
%! response(3).offset = o1;
%! response(3).direction = -n1;
%! response(4).node_label = res.node_id;
%! response(4).offset = o1;
%! response(4).direction = -[0; 1; 0];

%! log_dat.nodes(1).label = res.node_id;
%! log_dat.nodes(1).orientation_description = "euler123";
%! log_dat.nodes(1).X0 = zeros(3, 1);
%! log_dat.nodes(1).R0 = eye(3);
%! [a, v, s] = mbdyn_post_rigid_body_kinematics(res, log_dat, response);
%! tol = eps^0.8;
%! assert_simple(a{1}, a_rad.', tol * norm(a_rad));
%! assert_simple(v{1}, zeros(length(res.t), 1), tol * norm(v_tan));
%! assert_simple(a{2}, a_tan.', tol * norm(a_tan));
%! assert_simple(v{2}, v_tan.', tol * norm(v_tan));
%! assert_simple(a{3}, -a_rad.', tol * norm(a_rad));
%! assert_simple(v{3}, zeros(length(res.t), 1), tol * norm(v_tan));
%! assert_simple(a{4}, -a_tan.', tol * norm(a_tan));
%! assert_simple(v{4}, -v_tan.', tol * norm(v_tan));

%!test
%! t = linspace(0, 10, 100);
%! x0 = 1;
%! v0 = 10;
%! a0 = 20;
%! a = repmat(a0, 1, length(t));
%! v = v0 + a0 * t;
%! x = x0 + v0 * t + 0.5 * a0 * t.^2;

%! n1 = [5; 7; 9];
%! n1 /= norm(n1);
%! o1 = [1; 2; 3];
%! res.t = t.';
%! res.trajectory{1} = [n1 * x;
%!                      zeros(3, length(t))].';
%! res.velocity{1} = [n1 * v;
%!                    zeros(3, length(t))].';
%! res.acceleration{1} = [n1 * a;
%!                        zeros(3, length(t))].';
%! res.node_id = 1234;
%! response(1).node_label = res.node_id;
%! response(1).offset = o1;
%! response(1).direction = n1;

%! log_dat.nodes(1).label = res.node_id;
%! log_dat.nodes(1).orientation_description = "euler123";
%! log_dat.nodes(1).X0 = zeros(3, 1);
%! log_dat.nodes(1).R0 = eye(3);
%! [a1, v1, s1] = mbdyn_post_rigid_body_kinematics(res, log_dat, response);
%! tol = eps;
%! assert_simple(a1{1}, a.', tol * norm(a));
%! assert_simple(v1{1}, v.', tol * norm(v));

%!test
%! r1 = 15e-3;
%! omega0 = 100;
%! Phi0 = 30 * pi / 180;
%! t = linspace(0, abs(2 * pi / omega0), 100);
%! omegaP = 500;
%! Phi1 = Phi0 + omega0 * t + 0.5 * omegaP * t.^2;
%! omega1 = omega0 + omegaP * t;
%! o1 = [r1; 0; 0];
%! x1 = r1 * [cos(Phi1);
%!            sin(Phi1);
%!            zeros(1, length(t))];
%! xP1 = r1 * [-sin(Phi1) .* omega1;
%!              cos(Phi1) .* omega1;
%!              zeros(1, length(t))];
%! xPP1 = r1 * [-cos(Phi1) .* omega1.^2 - sin(Phi1) * omegaP;
%!              -sin(Phi1) .* omega1.^2 + cos(Phi1) * omegaP;
%!              zeros(1, length(t))];
%! res.t = t.';
%! res.trajectory{1} = [zeros(5, length(t));
%!                      Phi1].';
%! res.velocity{1} = [zeros(5, length(t));
%!                    omega1].';
%! res.acceleration{1} = [zeros(5, length(t));
%!                        repmat(omegaP, 1, length(t))].';
%! res.node_id = 1234;
%! response(1).node_label = res.node_id;
%! response(1).offset = o1;

%! log_dat.nodes(1).label = res.node_id;
%! log_dat.nodes(1).orientation_description = "euler123";
%! log_dat.nodes(1).X0 = x1(:, 1)*2;
%! log_dat.nodes(1).R0 = euler123_to_rotation_matrix([0; 0; 2*Phi0]);
%! [a, v, s] = mbdyn_post_rigid_body_kinematics(res, log_dat, response);
%! tol = eps^0.8;
%! assert_simple(s{1}, (x1 - log_dat.nodes(1).X0 - log_dat.nodes(1).R0 * o1).', tol * norm(x1));
%! assert_simple(v{1}, xP1.', tol * norm(xP1));
%! assert_simple(a{1}, xPP1.', tol * norm(xPP1));

%!demo
%!demo
%! r1 = 15e-3;
%! omega0 = 100;
%! Phi0 = 30 * pi / 180;
%! t = linspace(0, abs(2 * pi / omega0), 100);
%! omegaP = 10;
%! Phi1 = Phi0 + omega0 * t + 0.5 * omegaP * t.^2;
%! omega1 = omega0 + omegaP * t;
%! a_rad = -r1 * omega1.^2;
%! a_tan = repmat(r1 * omegaP, 1, length(t));
%! v_tan = r1 * omega1;
%! n1 = [1; 0; 0];
%! o1 = [r1; 0; 0];
%! x1 = [r1 * cos(Phi1);
%!       r1 * sin(Phi1);
%!       zeros(1, length(t))];
%! res.t = t.';
%! res.trajectory{1} = [zeros(5, length(t));
%!                      Phi1].';
%! res.velocity{1} = [zeros(5, length(t));
%!                    omega1].';
%! res.acceleration{1} = [zeros(5, length(t));
%!                        repmat(omegaP, 1, length(t))].';
%! res.node_id = 1234;
%! response(1).node_label = res.node_id;
%! response(1).offset = o1;
%! response(1).direction = n1;
%! response(2).node_label = res.node_id;
%! response(2).offset = o1;
%! response(2).direction = [0; 1; 0];
%! response(3).node_label = res.node_id;
%! response(3).offset = o1;
%! response(3).direction = -n1;
%! response(4).node_label = res.node_id;
%! response(4).offset = o1;
%! response(4).direction = -[0; 1; 0];

%! log_dat.nodes(1).label = res.node_id;
%! log_dat.nodes(1).orientation_description = "euler123";
%! log_dat.nodes(1).X0 = zeros(3, 1);
%! log_dat.nodes(1).R0 = eye(3);
%! [a, v, s] = mbdyn_post_rigid_body_kinematics(res, log_dat, response);
%! tol = eps^0.8;
%! assert_simple(a{1}, a_rad.', tol * norm(a_rad));
%! assert_simple(v{1}, zeros(length(res.t), 1), tol * norm(v_tan));
%! assert_simple(a{2}, a_tan.', tol * norm(a_tan));
%! assert_simple(v{2}, v_tan.', tol * norm(v_tan));
%! assert_simple(a{3}, -a_rad.', tol * norm(a_rad));
%! assert_simple(v{3}, zeros(length(res.t), 1), tol * norm(v_tan));
%! assert_simple(a{4}, -a_tan.', tol * norm(a_tan));
%! assert_simple(v{4}, -v_tan.', tol * norm(v_tan));
